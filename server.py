from flask import Flask, request, render_template, send_file, jsonify
from pdf2image import convert_from_path
from PIL import Image
import pandas as pd
import datetime
import base64
import shutil
import json
import os
import io

app = Flask(__name__)

# get the path of this server script
APP_ROOT = os.path.dirname(os.path.abspath(__file__))

@app.route("/")
def index():
    return render_template("upload.html")

@app.route("/upload", methods=['POST'])
def upload():
    
    # path for each folder
    # incoming folder for incoming photos from the app
    # analysed folder is to store photos that has been analysed
    # results folder is to store results of each analysis
    incoming_folder = os.path.join(APP_ROOT, 'incoming/')
    analysed_folder = os.path.join(APP_ROOT, 'analysed/')
    results_folder = os.path.join(APP_ROOT, 'results/')

    # accept incoming json
    incoming_json = request.get_json()
    
    # retrieve every field in json
    phone_brand = incoming_json['phone_brand']
    # standardize all phone brand's name
    phone_brand = phone_brand.lower()
    phone_brand = phone_brand.capitalize()
    location = incoming_json['location']
    lat = incoming_json['latitude']
    long = incoming_json['longitude']
    image = incoming_json['image']
    # decomind image file
    image = bytes(image, 'utf-8')
    image = base64.b64decode(image)
    image = Image.open(io.BytesIO(image))
    # save image file in jpg format
    image.save(os.path.join(incoming_folder, 'received.jpg')) 
    old_image_file = ""
    current_image_file = ""
    image_filename = ""

    # make a folder with the phone brand's name
    if not os.path.exists(os.path.join(results_folder, phone_brand)):
        os.mkdir(os.path.join(results_folder, phone_brand))
    
    # run r script that analyse the photo
    os.system("Rscript assessimagefun3.R")

    # get current system datetime
    # this is to generate a unique filename for every photos and results
    # filename format as follows
    # csv file: phone_brand location timestamp.csv
    # pdf file: phone_brand location timestamp.pdf
    dt = datetime.datetime.now()
    Datetime = dt.strftime("%Y-%m-%d %H:%M:%S")
    Datetime = Datetime.replace(":", ".") 

    # remove r plots which is generated by the r script
    # client already agree on this
    r_plots = incoming_folder + 'Rplots.pdf'
    os.remove(r_plots)

    # client r script will output all the results file to incoming folder
    # sorting and renaming for all those files begin from here

    # list all the files in incoming folder
    files =os.listdir(incoming_folder)

    for f in files:
        # get file extension
        ext = f.split('.')
        ext = ext[1]
        
        # only retrieve jpeg or jpg file
        if ext == 'jpeg' or ext == 'jpg':
            current_image_file = f
            old_image_file = f
            break

    # get the full path of the image file
    current_image_file = os.path.join(incoming_folder, current_image_file)

    # move analysed photos to analysed folder
    if os.path.splitext(current_image_file)[-1].lower() == ".jpeg":
        new_filename = phone_brand + " " + location + " " + Datetime + ".jpeg"
        image_filename = new_filename
        shutil.move(current_image_file, os.path.join(analysed_folder, new_filename))

    elif os.path.splitext(current_image_file)[-1].lower() == ".jpg":
        new_filename = phone_brand + " " + location + " " + Datetime + ".jpg"
        image_filename = new_filename
        shutil.move(current_image_file, os.path.join(analysed_folder, new_filename))

    # list all the remaining folders in incoming folder
    files =os.listdir(incoming_folder)

    # now move all the results files to the results folder
    for f in files:       
        shutil.move(incoming_folder + f, results_folder)

    # no_name is the default filename generated from the r script
    old_csv = os.path.join(results_folder, "no_nameTableOut.csv")
    old_pdf = os.path.join(results_folder, "no_name.pdf")

    # rename all the results file accordingly
    phone_brand_path = phone_brand + "/"
    new_csv = phone_brand + " " + location + " " + Datetime + "TableOut.csv"
    new_csv = os.path.join(os.path.join(results_folder, phone_brand_path), new_csv)
    new_pdf = phone_brand + " " + location + " " + Datetime + ".pdf"
    new_pdf  = os.path.join(os.path.join(results_folder, phone_brand_path), new_pdf)

    shutil.move(old_csv, new_csv)
    shutil.move(old_pdf, new_pdf)

    # edit the image file stated in the csv
    # it should be no_name originally
    # rename to the image filename respectively
    df = pd.read_csv(new_csv)
    df = df.replace("no_name", phone_brand)
    df = df.replace(old_image_file, image_filename)
    df['location'] = location
    df['latitude'] = lat
    df['longitude'] = long
    band1_median = df['median']
    band1_median = band1_median[0]
    df = df.drop(df.columns[0], axis = 1)
    df.to_csv(new_csv, index = False, header = True)
    # calculate ssc value
    # formula given by client
    ssc_value = -0.0323 * band1_median + 4.5155
    ssc_value = round(ssc_value, 6)

    # append all the new results to the all_results csv file
    all_result = pd.read_csv(os.path.join(results_folder, "all_results.csv"))
    new_csv = pd.read_csv(new_csv)
    all_result = all_result.append(new_csv)
    # swap the location column with longitude column for better viewing purpose
    col_list = list(all_result.columns)
    col_location, col_longitude = col_list.index('location'), col_list.index('longitude')
    col_list[col_location], col_list[col_longitude] = col_list[col_longitude], col_list[col_location]
    all_result = all_result[col_list]
    all_result.to_csv(os.path.join(results_folder, "all_results.csv"), index = False)
    print(ssc_value)

    # converting pdf into images
    # get the filepath for pdf file
    new_pdf = os.path.join(results_folder, new_pdf)
    # set image dpi to 500
    pages = convert_from_path(new_pdf, 500)

    # get the first page of the pdf only
    # save it as jpg file
    for page in pages:
        page.save(os.path.join(results_folder, 'pdf_img.jpg'),'JPEG')
        break

    # open the jpg file and convert it into bytes
    byte = None
    with open(os.path.join(results_folder, 'pdf_img.jpg'), 'rb')as image:
        img = image.read()
        byte = base64.b64encode(img)
        byte = str(byte)
        byte = byte[1:]
        byte = byte[1:]
        byte = byte[:-1]

    # remove the image file after sending to avoid confusion
    os.remove(os.path.join(results_folder, 'pdf_img.jpg'))

    return jsonify(ssc = ssc_value, pdf_img = byte)

# run main
if __name__ == '__main__':
    app.run(host='0.0.0.0', debug=False)